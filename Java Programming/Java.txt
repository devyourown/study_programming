상속
    자식 클래스가 부모 클래스를 상속해 필드와 메소드를 물려받는 것이다.
    자바에서는 다중 상속이 불가능하다.

    부모 생성자 호출
    super()로 호출하며 반드시 한번 호출해야 한다. 만약 호출하지 않을시
    자동으로 super()를 넣어준다. 만약 인수가 있다면 명시적으로 호출해야 한다.

    메소드 재정의
    @Override라는 문구를 자식 메소드에서 붙여 부모 메소드를 재정의 하는 것이다.
    이 때 재정의된 메소드만 호출된다.

    final 클래스 final 메소드
    final 클래스로 선언되면 부모 클래스로 상속될 수 없다.
    final 메소드로 선언되면 오버라이딩이 불가능하다.

    추상 클래스
    abstract로 선언되며 이 클래스만으로는 객체를 생성할 수 없다.
    자식 클래스가 실체 클래스가 되어 추상 클래스를 물려 받는다.
    이 때 추상 메소드가 선언되면 자식 클래스는 반드시 오버라이드 해야한다.

인터페이스
    인터페이스는 객체의 사용 방법을 정의한 타입이다.
    인터페이스는 상수와 메소드만을 구성 멤버로 가진다.
    객체로 생성할 수 없기 때문에 생성자를 가질 수 없다.
    모든 멤버는 public 접근 제한자를 갖는다.

    인터페이스 구현
    인터페이스 메소드를 호출하면 인터페이스는 구현 객체의 메소드를 호출한다.
    인터페이스는 구현 객체가 필요하다.

    익명 구현 객체
    일회성으로 구현 객체를 사용하기 위해 자바는 익명 구현 객체를 지원한다.
    interface vari = new interface() {};으로 {} 안에 구현 메소드를 넣어
    익명 객체를 생성한다.

    다중 인터페이스 구현 클래스
    객체가 두 개이상의 인터페이스 추상 메소드를 구현한다면 다중 인터페이스
    구현 객체로 사용할 수 있다.

    인터페이스 사용
    인터페이스는 디폴트 메소드와 정적 메소드도 구성 멤버로 가질 수 있다.
    이 때 디폴트 메소드는 구현 객체가 있어야 사용할 수 있다.

    타입 변환과 다형성
    상속 vs 인터페이스
    상속은 같은 종류의 하위 클래스를 만드는 기술이고 인터페이스는 사용 방법이
    동일한 클래스를 만드는 기술이라는 개념적 차이는 있지만 둘 다 다형성을 
    구현하는 기술이라는 공통점이 있다.

    인터페이스 상속
    인터페이스도 다른 인터페이스를 상속할 수 있다. 이 때 다중 상속을 허용한다.
    하위 인터페이스를 구현하려면 하위 인터페이스가 상속한 상위 인터페이스의
    추상 메소드까지 모두 구현해야 한다.

    디폴트 메소드의 필요성
    기존 인터페이스의 이름과 추상 메소드의 변경 없이 디폴트 메소드를 추가한다면
    이전에 개발한 구현 클래스의 변경이 필요없이 그대로 사용하면서 새롭게 추가될
    구현 클래스는 디폴트 메소드를 활용할 수 있다.

    디폴트 메소드가 있는 인터페이스 상속
    자식 인터페이스에서 부모 디폴트 메소드를 활용하는 방법
    1.디폴트 메소드를 단순히 상속만 받는다.
    2.디폴트 메소드를 재정의한다.
    3.디폴트 메소드를 추상 메소드로 재선언한다.

중첩 클래스와 중첩 인터페이스
    중첩 클래스는 클래스 안에 클래스를 선언하는 것이고 중첩 인터페이스는
    클래스 안에 인터페이스를 선언하는 것이다.

    익명 객체 vs 익명 구현 객체
    익명 객체는 부모를 상속하는 자식 객체를 익명으로 구현할 때 쓰는 방법으로
    Person person = new Person(args) {}; 으로 선언하고 {} 안에 자식 객체가
    쓸 필드나 메소드가 들어간다.
    익명 구현 객체는 앞에서 얘기했듯이 인터페이스를 바로 구현한다.

예외 처리
    예외는 사용자의 잘못된 조작 또는 개발자의 잘못된 코딩으로 인해 발생하는
    프로그램 오류를 말한다. 예외가 발생하면 프로그램을 곧바로 종료한다는
    점에서는 에러와 동일하다 그러나 예외는 예외 처리를 통해 프로그램을 
    종료하지 않고 정상 실행 상태가 유지되도록 할 수 있다.
    실행하는 도중에 예외가 발생하면 해당 예외 클래스로 객체를 생성한다.

    예외는 두 가지 종류가 있다. 하나는 일반 예외이고 다른 하나는 실행 예외
    이다. 일반 예외는 컴파일러가 예외를 체크해주지만 실행 예외는 그렇지 않다.
    따라서 오로지 개발자의 경험에 의해서 예외 처리 코드를 삽입해야 한다.

    실행 예외
    NullPointerException
    객체 참조가 없는 상태, 즉 null 값을 갖는 참조 변수가 사용되었을 때
    일어난다.

    ArrayIndexOutOfBoundsException
    배열에서 인덱스 범위를 초과하여 사용할 경우 일어난다.

    NumberFormatException
    parseXXX()메소드를 사용할 때 발생한다. 문자열을 숫자로 변환할 수 없을 때
    발생한다.

    ClassCastException
    억지로 타입 변환을 시도할 경우 발생한다. instanceof 연산자로 확인하자.

    예외 처리 코드
    예외가 발생했을 때 프로그램의 갑작스러운 종료를 막고, 정상 실행을 유지할 수
    있도록 처리하는 코드를 예외 처리 코드라고 한다. 예외 처리 코드는 
    try-catch-finally 블록을 이용한다. 생성자 내부와 메소드 내부에서 작성된다.
    try 블록에는 예외 발생 가능 코드가 위치한다. 예외 발생하면 즉시 실행을 멈추고
    catch 블록으로 이동하여 예외 처리 코드를 실행한다.
    예외 발생 여부와 관계없이 finally 블록은 실행된다. try/catch 블록에서 
    return문을 사용하더라도 finally는 실행된다.

    예외 종류에 따른 처리 코드
    다중 catch 블록을 작성해 예외별로 처리할 수 있다. 다중 catch 블록이라
    하더라도 단 하나의 catch 블록만 실행된다.

    자동 리소스 닫기
    try-with-resources를 사용하면 예외 발생 여부와 상관없이 사용했던
    리소스 객체를 안전하게 닫아준다. 리소스 객체는 AutoCloseable 인터페이스를
    구현하고 있어야 한다.

    예외 떠넘기기
    경우에 따라서는 메소드를 호출한 곳으로 예외를 떠넘길 수도 있다. 이 때
    사용하는 코드가 throws이다. 메소드 선언부 끝에 작성되어 메소드에서
    처리하지 않은 예외를 호출한 곳으로 떠넘기는 역할을 한다.
    throws가 붙어있는 메소드는 반드시 try 블록 내에서 호출되어야 한다.

멀티 스레드
    어떻게 하나의 프로세스가 두 가지 이상의 작업을 처리할 수 있을까?
    멀티 스레드를 통해 가능하다. 스레드는 사전적 의미로 한 가닥의 실이라는
    뜻인데, 한 가지 작업을 실행하기 위해 순차적으로 실행할 코드를 실처럼
    이어 놓았다고 해서 유래된 이름이다. 하나의 스레드는 하나의 코드
    실행 흐름이기 때문에 두 개 이상의 스레드면 그만큼의 코드 실행 흐름이
    생긴다는 의미다.
    멀티 스레드는 하나의 프로세스 내부에 생성되기 때문에 하나의 스레드가
    예외를 발생시키면 프로세스 자체가 종료될 수 있다.

    메인 스레드
    메인 스레드는 main() 메소드를 실행하면서 시작된다. 메인 스레드는
    필요에 따라 작업 스레드들을 만들 수 있다. 멀티 스레드 앱은 
    실행중인 스레드가 하나라도 있다면 프로세스는 종료되지 않는다.

    작업 스레드 생성과 실행
    작업 스레드는 직접 객체화해서 생성해도 되고 Thread를 상속한 
    하위 클래스를 만들어 생성할 수도 있다.
    Thread thread = new Thread(Runnable target);으로 생성하는데
    Runnable은 작업 스레드가 실행할 수 있는 코드를 가지고 있는 객체다
    인터페이스 타입이어서 구현 객체를 만들어야 한다. 이 때 run() 메소드가
    추상 메소드이고 이 안에 Thread에서 실행할 코드를 넣으면 된다.
    작업 스레드는 생성되는 즉시 실행되는 것이 아니라, start() 메소드를
    다음과 같이 호출해야만 비로소 실행된다.
    thread.start();

    Thread 하위 클래스로부터 생성
    작업 스레드가 실행할 작업을 Runnable로 만들지 않고, Thread의 
    하위 클래스로 작업 스레드를 정의하면서 작업 내용을 포함시킬 수도 있따.
    Thread 클래스를 상속한 후 run 메소드를 재정의해서 스레드가 실행할
    코드를 작성하면 된다.

    스레드의 이름
    디버깅할 목적으로 스레드에 이름을 설정한다. setName으로 설정한다.

    스레드 우선순위
    스레드 스케줄링은 우선순위 방식과 순환 할당 방식을 사용한다.
    우선순위 방식은 우선순위가 높은 스레드가 실행 상태를 더 많이 가지도록
    스케줄링하는 것을 말한다.
    순환 할당 방식은 시간 할당량을 정해서 하나의 스레드를 정해진 시간만큼
    실행하고 다시 다른 스레드를 실행하는 방식을 말한다.
    개발자가 제어할 수 있는건 우선 순위 방식뿐이다.
    우선 순위는 1에서 10까지 부여되는데 1이 가장 낮고 10이 가장 높다.
    setPriority() 메소드를 이용해 설정한다.

    동기화 메소드와 동기화 블록
    스레드가 사용 중인 객체를 다른 스레드가 변경할 수 없도록 하려면
    스레드 작업이 끝날 때까지 객체에 잠금을 걸면 된다.
    멆티 스레드 프로그램에서 단 하나의 스레드만 실행할 수 있는
    코드 영역을 임계 영역이라고 한다. 자바는 임계 영역을 지정하기 위해
    동기화 메소드와 동기화 블록을 제공한다.
    동기화 메소드를 만드는 방법은 메소드 선언에 synchronized 키워드를
    붙이면 된다. 인스턴스와 정적 상관없이 붙일 수 있다.
    public synchronized void method()
    메소드 전체가 아니라 일부 내용만 임계 영역으로 만들고 싶다면
    동기화 블록을 만들면 된다.

    스레드 상태
    스레드에는 실행 대기 상태, 실행 상태, 종료 상태, 일시 정지 상태가 있다.
    실행 대기 상태는 아직 스케줄링이 되지 않아서 실행을 기다리고 있는 상태다.
    스케줄링에 의해 선택이 되면 실행 상태가 되고 어느 정도 실행하다가 
    다시 실행 대기 상태로 돌아갈 수 있다. 그러다 실행이 종료되면 종료 상태가
    된다. 실행 상태에서 일시 정지 상태로 갈 수도 있다. 일시 정지 상태는
    스레드가 실행할 수 없는 상태이다.

    스레드 상태 제어
    실행 중인 스레드의 상태를 변경하는 것을 스레드 상태 제어라고 한다.
    멀티 스레드 프로그램을 만들기 위해서는 정교한 스레드 상태 제어가
    필요한데, 상태 제어가 잘못되면 프로그램은 불안정해져서 다운된다.

    주어진 시간동안 일시 정지 sleep()
    실행 중인 스레드를 일정 시간 멈추게 하고 싶다면 Thread 클래스의
    정적 메소드인 sleep()을 사용한다. 주어진 시간 동안 일시 정지
    상태가 되고, 다시 실행 대기 상태로 돌아간다. 매개값은 밀리세컨드단위다.

    다른 스레드에게 실행 양보 yield()
    yield()를 호출한 스레드는 실행 대기 상태로 돌아가고 동일한
    우선순위 또는 높은 우선순위를 갖는 다른 스레드가 실행된다.

    다른 스레드의 종료를 기다림 join()
    다른 스레드가 종료될 때까지 기다렸다가 실행해야 하는 경우가
    발생할 수 있다. 이 때 기다리는 스레드에서 기다려야 할 스레드의
    객체를 만들고 join()을 실행한다. 예를 들어 ThreadA, ThreadB가
    있을 때 ThreadA가 ThreadB를 기다려야 한다면 ThreadA 안에
    threadB = new ThreadB()를 만들고 threadB.start() 
    threadB.join(); 를 실행한다.

    스레드 간 협엽 wait(), notify(), notifyAll()
    두 개의 스레드를 교대로 번갈아가며 실행해야 할 경우가 있다.
    정확한 교대 작업이 필요할 경우, 자신의 작업이 끝나면 상대방 스레드를
    일시 정지 상태에서 풀어주고, 자신은 일시 정지 상태로 만드는 것이다.
    notify() 메소드를 호출해 일시 정지 상태에 있는 다른 스레드를 
    실행 대기 상태로 만들 수 있다. 다른 스레드는 wait()에 의해 일시정지된
    스레드 중 하나다. wait()은 자신의 스레드를 일시 정지 상태로 만든다.
    이 메소드들은 동기화 메소드 또는 동기화 블록 내에서만 사용할 수 있다.
    이 메소드들은 Object 클래스에 선언된 메소드이므로 모든 공유 객체에서
    호출 가능하다.

    스레드의 안전한 종료 stop 플래그, interrupt()
    스레드는 run() 메소드가 끝나면 자동적으로 종료되므로, run() 메소드가
    정상적으로 종료되도록 유도하는 것이 최선의 방법이다.

    interrupt() 메소드를 이용하는 방법
    interrupt() 메소드는 스레드가 일시 정지 상태에 있을 때 
    interruptException 예외를 발생시키는 역할을 한다. 역으로 생각하면
    스레드가 일시정지 상태가 되지 않으면 interrupt() 메소드 호출은
    아무런 의미가 없다. 스레드를 실행한 곳에 이 메소드를 사용한다.

    데몬 스레드 
    주 스레드의 작업을 돕는 보조적인 역할을 수행하는 스레드이다.
    주 스레드가 종료되면 데몬 스레드는 강제적으로 자동 종료된다.
    setDaemon()으로 호출가능하다. 

    스레드 그룹
    스레드는 반드시 하나의 스레드 그룹에 포함되는데, 명시적으로
    스레드 그룹에 포함시키지 않으면 기본적으로 자신을 생성한 스레드와
    같은 스레드 그룹에 속하게 된다.
    스레드 그룹에 포함시키면 그룹에 포함된 스레드들을 일괄 interrupt
    할 수 있다.

    스레드풀
    갑작스런 병렬 작업의 폭증으로 인한 스레드의 폭증을 막으려면 스레드풀을
    사용해야 한다. 스레드풀은 작업 처리에 사용되는 스레드를 제한된 개수만큼
    정해 놓고 작업 큐에 들어오는 작업을 가져와 처리한다.

제네릭
    제네릭은 클래스와 인터페이스, 그리고 메소드를 정의할 때 타입을
    파라미터로 사용할 수 있도록 한다.

    제네릭의 장점
    컴파일 시 강한 타입 체크를 할 수 있다.
    타입 변환이 불 필요하다.

    제네릭 타입은 타입을 파라미터로 가지는 클래스와 인터페이스를 말한다.
    클래스 또는 인터페이스 이름 뒤에 <T>를 넣어준다. T는 타입 파라미터의
    이름이다.
    제네릭 타입은 두 개 이상의 멀티 타입 파라미터를 사용할 수 있다. <T, M>
    
    <T extends 최상위 타입>
    타입 파라미터에 지정되는 구체적인 타입을 제한할 필요가 있다. 이 때
    제한된 타입 파라미터를 사용하면 하위 타입이나 구현 클래스만 들어가게
    지정할 수 있다.

    와일드카드 타입 <?>, <? extends ...> <? super ...>
    <?>은 제한 없는 타입으로 모든 클래스나 인터페이스가 올 수 있다.
    <? extends>는 상속 객체나 자기 자신만 올 수 있다.
    <? super>는 상위 객체나 자기 자신만 올 수 있다.

    제네릭 타입도 부모 클래스가 될 수 있다.